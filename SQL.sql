DROP SCHEMA IF EXISTS SQL_COURSE_SYSTEM;
CREATE SCHEMA IF NOT EXISTS SQL_COURSE_SYSTEM;
USE SQL_COURSE_SYSTEM;

#==================================CREATE TABLE==================================

CREATE TABLE `USER`(
	SSN 					VARCHAR(9) 		NOT NULL,
	FNAME                	VARCHAR(15)		NOT NULL,
	LNAME                	VARCHAR(15)		NOT NULL,
	USERNAME                VARCHAR(10)		NOT NULL	UNIQUE,
	PASS					VARCHAR(20)		NOT NULL,
	EMAIL            		VARCHAR(30),
	SEX						VARCHAR(10),
	PRIMARY KEY (SSN),
	CHECK (LENGTH(PASS) >= 6 AND SEX IN ('MALE', 'FEMALE', 'UNKNOWN'))
);

CREATE TABLE STUDENT(
	SSN 					VARCHAR(9) 		NOT NULL,
	PRIMARY KEY (SSN),
	FOREIGN KEY (SSN) REFERENCES `USER`(SSN) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE LECTURER(
	SSN 					VARCHAR(9) 		NOT NULL,
    QUALIFICATION			VARCHAR(20),
	PRIMARY KEY (SSN),
	CONSTRAINT FOREIGN KEY (SSN) REFERENCES `USER`(SSN) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE ADMINISTRATOR(
	SSN 					VARCHAR(9) 		NOT NULL,
	PRIMARY KEY (SSN),
	FOREIGN KEY (SSN) REFERENCES `USER`(SSN) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE FACULTY(
	ID						INT			NOT NULL	AUTO_INCREMENT,
    `NAME`					VARCHAR(30)	NOT NULL,
    `DESCRIPTION`			VARCHAR(30),
    PRIMARY KEY (ID)
);

CREATE TABLE COURSE(
	ID 						INT 			NOT NULL	AUTO_INCREMENT,
	LECTURERSSN             VARCHAR(9),
	FACID	              	INT				NOT NULL,
	`NAME`	                VARCHAR(30)		NOT NULL,
	`DESCRIPTION` 			VARCHAR(99)		NOT NULL,
	PRICE            		INT,
	PRIMARY KEY (ID),
	CHECK (PRICE >= 0)
);
ALTER TABLE COURSE ADD (
	FOREIGN KEY (LECTURERSSN) REFERENCES LECTURER(SSN) ON DELETE SET NULL ON UPDATE CASCADE,
	FOREIGN KEY (FACID) REFERENCES FACULTY(ID) ON DELETE CASCADE ON UPDATE CASCADE
);
 
CREATE TABLE VIDEOCOURSE(
	COURSEID 				INT 			NOT NULL,
    COURSEDURATION			INT				NOT NULL,
	PRIMARY KEY (COURSEID)
);
ALTER TABLE VIDEOCOURSE ADD (
	FOREIGN KEY (COURSEID) REFERENCES COURSE(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CHECK (COURSEDURATION >= 600)
);

CREATE TABLE ONLINECOURSE(
	COURSEID 				INT 			NOT NULL,
	PRIMARY KEY (COURSEID)
);
ALTER TABLE ONLINECOURSE ADD (
	FOREIGN KEY (COURSEID) REFERENCES COURSE(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CLASS(
	NUM						INT				NOT NULL	UNIQUE	AUTO_INCREMENT,
    COURSEID				INT				NOT NULL,
    LECTURERSSN				VARCHAR(9),
    BEGINTIME				DATE			NOT NULL,
    ENDTIME					DATE			NOT NULL,
    `NAME`					VARCHAR(9) 		NOT NULL 	UNIQUE,
    PRIMARY KEY (NUM, COURSEID)
);
ALTER TABLE CLASS ADD (
	FOREIGN KEY (COURSEID) REFERENCES ONLINECOURSE(COURSEID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (LECTURERSSN) REFERENCES LECTURER(SSN) ON DELETE SET NULL ON UPDATE CASCADE,
	CHECK (BEGINTIME < ENDTIME)
);

CREATE TABLE REGISTER(
    STUDENTSSN				VARCHAR(9) 		NOT NULL,
    COURSEID				INT				NOT NULL,
    REGDATE 				DATE			NOT NULL,
    PRIMARY KEY (STUDENTSSN, COURSEID)
);
ALTER TABLE REGISTER ADD (
	`STATUS` 					VARCHAR(15) 	NOT NULL,
	FOREIGN KEY (COURSEID) REFERENCES COURSE(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (STUDENTSSN) REFERENCES STUDENT(SSN) ON UPDATE CASCADE ON DELETE CASCADE,
    CHECK (STATUS IN ('ĐANG CHỜ', 'ĐÃ XÁC NHẬN', 'ĐÃ HỦY'))
);

CREATE TABLE JOINCLASS(
    STUDENTSSN				VARCHAR(9) 		NOT NULL,
    CLASSNUM				INT				NOT NULL,
    COURSEID 				INT				NOT NULL
);
ALTER TABLE JOINCLASS ADD (
	PRIMARY KEY(STUDENTSSN, CLASSNUM, COURSEID),
	FOREIGN KEY (CLASSNUM, COURSEID) REFERENCES CLASS(NUM, COURSEID) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (STUDENTSSN) REFERENCES STUDENT(SSN) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE FEEDBACK(
    STUDENTSSN				VARCHAR(9) 		NOT NULL,
    COURSEID 				INT				NOT NULL,
    `COMMENT`				VARCHAR(99),
    SCORE					INT				NOT NULL,
	PRIMARY KEY (STUDENTSSN, COURSEID)
);
ALTER TABLE FEEDBACK ADD (
	FOREIGN KEY (COURSEID) REFERENCES COURSE(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (STUDENTSSN) REFERENCES STUDENT(SSN) ON UPDATE CASCADE ON DELETE CASCADE,
    CHECK (SCORE > 0 AND SCORE <=10)
);

CREATE TABLE USERPHONE(
    USERSSN					VARCHAR(9) 		NOT NULL,
    PHONE					VARCHAR(10)		NOT NULL,
    PRIMARY KEY (USERSSN, PHONE),
	FOREIGN KEY (USERSSN) REFERENCES USER(SSN) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CLASSWEEK(
	CLASSNUM				INT				NOT NULL,
    COURSEID				INT 			NOT NULL,
    `WEEK`					INT				NOT NULL,
	PRIMARY KEY (CLASSNUM, COURSEID, `WEEK`),
    FOREIGN KEY (CLASSNUM, COURSEID) REFERENCES CLASS(NUM, COURSEID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CLASSLESSON(
	CLASSNUM				INT				NOT NULL,
    COURSEID				INT 			NOT NULL,
    LESSON					INT				NOT NULL,
    PRIMARY KEY (CLASSNUM, COURSEID, LESSON),
	FOREIGN KEY (CLASSNUM, COURSEID) REFERENCES CLASS(NUM, COURSEID) ON DELETE CASCADE ON UPDATE CASCADE
);
#==================================CREATE TRIGGER==================================
DROP TRIGGER IF EXISTS AFTER_JOINCLASS_INSERT;
DROP TRIGGER IF EXISTS CHECK_FULL;
DROP TRIGGER IF EXISTS CHECK_TIME;

DELIMITER //
CREATE TRIGGER BEFORE_JOINCLASS_INSERT BEFORE INSERT ON JOINCLASS
FOR EACH ROW
BEGIN
	DECLARE ERR INT;
	SET ERR = (SELECT COUNT(*) FROM JOINCLASS
				WHERE STUDENTSSN = NEW.STUDENTSSN AND COURSEID = NEW.COURSEID);
	IF (ERR = 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Không thể tham gia cùng lúc 2 lớp của một khóa học!';
	END IF;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER CHECK_FULL BEFORE INSERT ON JOINCLASS
FOR EACH ROW
BEGIN
	IF (NUM_OF_STUDENTS(NEW.CLASSNUM) = 100) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Lớp học đã đủ số lượng, bạn không thể tham gia.';
	END IF;
END //
DELIMITER ;
DROP VIEW IF EXISTS A;
DROP VIEW IF EXISTS B;

DELIMITER //
CREATE TRIGGER CHECK_TIME BEFORE INSERT ON JOINCLASS
FOR EACH ROW
BEGIN
	DECLARE N INT;
    DECLARE M INT;
    DECLARE T INT;
    SET N = (SELECT COUNT(*) FROM (SELECT W.WEEK, L.LESSON
			FROM CLASS AS C, CLASSWEEK AS W, CLASSLESSON AS L
			WHERE C.NUM = W.CLASSNUM AND C.NUM = L.CLASSNUM AND C.NUM = NEW.CLASSNUM) AS A);
    SET M = (SELECT COUNT(*) 
			FROM (SELECT W.WEEK, L.LESSON
			FROM CLASS AS C, CLASSWEEK AS W, CLASSLESSON AS L
			WHERE C.NUM = W.CLASSNUM AND C.NUM = L.CLASSNUM AND C.NUM IN (SELECT J.CLASSNUM
			FROM JOINCLASS AS J
			WHERE J.STUDENTSSN = NEW.STUDENTSSN)) AS B);
	SET T = (SELECT COUNT(*) FROM ((SELECT * FROM (SELECT W.WEEK, L.LESSON
			FROM CLASS AS C, CLASSWEEK AS W, CLASSLESSON AS L
			WHERE C.NUM = W.CLASSNUM AND C.NUM = L.CLASSNUM AND C.NUM = NEW.CLASSNUM) AS A)
            UNION 
            (SELECT *
			FROM (SELECT W.WEEK, L.LESSON
			FROM CLASS AS C, CLASSWEEK AS W, CLASSLESSON AS L
			WHERE C.NUM = W.CLASSNUM AND C.NUM = L.CLASSNUM AND C.NUM IN (SELECT J.CLASSNUM
			FROM JOINCLASS AS J
			WHERE J.STUDENTSSN = NEW.STUDENTSSN)) AS B)) AS C);
	IF (N + M > T) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Lịch học bị trùng!';
	END IF;
END //
DELIMITER ;

# Đăng ký tài khoản
DELIMITER //
CREATE PROCEDURE INSERT_STUDENT(IN 	SSN 		VARCHAR(9),
									FNAME		VARCHAR(15),
									LNAME		VARCHAR(15),
									USERNAME 	VARCHAR(10),
									PASS 		VARCHAR(20),
									EMAIL		VARCHAR(30),
									SEX			VARCHAR(10))
BEGIN
	INSERT INTO USER VALUES (SSN, FNAME, LNAME, USERNAME, PASS, EMAIL, SEX);
    INSERT INTO STUDENT VALUES (SSN);
END //

CREATE PROCEDURE INSERT_LECTURER(IN 	SSN 		VARCHAR(9),
									FNAME		VARCHAR(15),
									LNAME		VARCHAR(15),
									USERNAME  	VARCHAR(10),
									PASS		VARCHAR(20),
									EMAIL		VARCHAR(30),
									SEX			VARCHAR(10),
                                    QUALIFICATION	VARCHAR(20))
BEGIN
	INSERT INTO USER VALUES (SSN, FNAME, LNAME, USERNAME, PASS, EMAIL, SEX);
    INSERT INTO LECTURER VALUES (SSN, QUALIFICATION);
END //

CREATE PROCEDURE INSERT_ADMIN(IN 	SSN 		VARCHAR(9),
									FNAME		VARCHAR(15),
									LNAME		VARCHAR(15),
									USERNAME  	VARCHAR(10),
									PASS		VARCHAR(20),
									EMAIL		VARCHAR(30),
									SEX			VARCHAR(10))
BEGIN
	INSERT INTO USER VALUES (SSN, FNAME, LNAME, USERNAME, PASS, EMAIL, SEX);
    INSERT INTO ADMINISTRATOR VALUES (SSN);
END //
DELIMITER ;

# Đăng ký khóa học
DELIMITER //
CREATE PROCEDURE REGISTER(IN 	STUDENTSSN		VARCHAR(9),
								COURSEID		INT,
								REGDATE 		DATE,
								STATUS			VARCHAR(15))
BEGIN
	INSERT INTO REGISTER VALUES (STUDENTSSN, COURSEID, REGDATE, STATUS);
END //
DELIMITER;

# Cập nhật thông tin cá nhân
DELIMITER //
CREATE PROCEDURE UPDATE_PROFILE(IN	SSN 		VARCHAR(9),
									FNAME		VARCHAR(15),
									LNAME		VARCHAR(15),
									PASS		VARCHAR(20),
									EMAIL		VARCHAR(30),
									SEX			VARCHAR(10))
BEGIN
	UPDATE USER AS U
    SET U.FNAME = FNAME,
		U.LNAME = LNAME,
        U.PASS = PASS,
        U.EMAIL = EMAIL,
        U.SEX = SEX
	WHERE U.SSN = SSN;
END //
DELIMITER ;

# Xem danh sách các khóa học trực tuyến (chỉ hiển thị các khóa học tồn tại lớp chưa khai giảng)
DELIMITER //
CREATE PROCEDURE VIEW_ONL_COURSES()
BEGIN
	SELECT C.NAME, C.PRICE, C.DESCRIPTION, FULL_NAME(U.FNAME, U.LNAME) AS LEC_NAME
	FROM COURSE AS C, USER AS U
	WHERE C.LECTURERSSN = U.SSN AND C.ID IN (SELECT DISTINCT COURSEID
											FROM CLASS
											WHERE BEGINTIME > CURRENT_DATE());
END //
DELIMITER;
                
# Xem danh sách khóa học video của hệ thống
DELIMITER //
CREATE PROCEDURE VIEW_VID_COURSES()
BEGIN
	SELECT NAME, PRICE, DESCRIPTION, COURSEDURATION, FULL_NAME(U.FNAME, U.LNAME) AS LEC_NAME
	FROM VIDEOCOURSE, COURSE, USER AS U
	WHERE COURSEID = ID AND LECTURERSSN = U.SSN;
END //
DELIMITER;

# Xem danh sách khóa học đã đăng ký
DELIMITER //
CREATE PROCEDURE VIEW_REGISTERED_COURSE(IN 	SSN	VARCHAR(9))
BEGIN
	SELECT NAME, DESCRIPTION, PRICE
    FROM COURSE AS C, REGISTER AS R
    WHERE SSN = R.STUDENTSSN AND C.ID = R.COURSEID;
END //
DELIMITER;

# Xem danh sách lớp học đã tham gia
DELIMITER //
CREATE PROCEDURE VIEW_CLASS_JOINED(IN STUDENTSSN	VARCHAR(9))
BEGIN
	SELECT C.NAME AS CLASS_NAME, C.BEGINTIME AS `BEGIN`, C.ENDTIME AS `END`, full_name(U.FNAME, U.LNAME) AS FULL_NAME
    FROM JOINCLASS AS J, CLASS AS C, USER AS U
    WHERE J.CLASSNUM = C.NUM AND J.STUDENTSSN = STUDENTSSN AND U.SSN = C.LECTURERSSN;
END //
DELIMITER;

# Tìm kiếm khóa học
DELIMITER //
CREATE PROCEDURE SEARCH_COURSE(IN 	NAME		VARCHAR(30),
									FROMPRICE	INT,
                                    TOPRICE	INT)
BEGIN
	SELECT C.NAME, C.DESCRIPTION, C.PRICE, FULL_NAME(U.FNAME, U.LNAME)
    FROM COURSE AS C, LECTURER AS L, USER AS U
    WHERE C.LECTURERSSN = L.SSN AND L.SSN = U.SSN AND C.NAME LIKE (CONCAT('%', NAME, '%')) AND C.PRICE >= FROMPRICE AND C.PRICE <= TOPRICE;
END //
DELIMITER;

# Xem danh sách phản hồi của học viên đối với 1 môn học cụ thể
DELIMITER //
CREATE PROCEDURE VIEW_FEEDBACK(IN 	COURSEID	INT)
BEGIN
	SELECT full_name(U.FNAME, U.LNAME) AS FULLNAME, F.SCORE, F.`COMMENT`
    FROM FEEDBACK AS F, USER AS U
    WHERE F.STUDENTSSN = U.SSN AND F.COURSEID = COURSEID;
END //
DELIMITER;

# Xem danh sách lớp học của khóa học trực tuyến
DELIMITER //
CREATE PROCEDURE VIEW_CLASSES(IN 	COURSEID	INT)
BEGIN
	SELECT C.NAME, C.BEGINTIME, C.ENDTIME, FULL_NAME(U.FNAME, U.LNAME)
    FROM CLASS AS C, LECTURER AS L, USER AS U
    WHERE C.LECTURERSSN = L.SSN AND L.SSN = U.SSN AND C.COURSEID = COURSEID;
END //
DELIMITER;

# Xem danh sách học viên đăng ký khóa học (Do số lượng học viên có thể rất lớn, nên ta sẽ trả về số lượng học viên theo từng trang)
DELIMITER //
CREATE PROCEDURE VIEW_STUDENTS_OF_COURSE(IN 	COURSEID	INT,
											NUMPERPAGE			INT)
BEGIN
	SELECT U.SSN, FULL_NAME(U.FNAME, U.LNAME)
    FROM REGISTER AS R, STUDENT AS S, USER AS U
    WHERE S.SSN = U.SSN AND R.STUDENTSSN = S.SSN AND R.COURSEID = COURSEID
    ORDER BY R.REGDATE DESC LIMIT NUMPERPAGE;
END //
DELIMITER;

# Xem danh sách học viên tham gia lớp học
DELIMITER //
CREATE PROCEDURE VIEW_STUDENTS_OF_CLASS(IN 	CLASSNUM	INT,
											NUMPERPAGE	INT)
BEGIN
	SELECT U.SSN, FULL_NAME(U.FNAME, U.LNAME)
    FROM JOINCLASS AS J, STUDENT AS S, USER AS U
    WHERE S.SSN = U.SSN AND J.STUDENTSSN = S.SSN AND J.CLASSNUM = CLASSNUM
    ORDER BY U.SSN LIMIT NUMPERPAGE;
END //
DELIMITER;

# Xem danh sách khóa học đang dạy
DELIMITER //
CREATE PROCEDURE VIEW_COURSE_BEING_MANAGE(IN 	LECTURERSSN	VARCHAR(9))
BEGIN
	SELECT C.NAME, C.DESCRIPTION, C.PRICE
    FROM COURSE AS C
    WHERE C.LECTURERSSN = LECTURERSSN;
END //
DELIMITER;

# XEM DANH SÁCH LỚP HỌC ĐANG DẠY
DELIMITER //
CREATE PROCEDURE VIEW_CLASSES_BEING_TAUGHT(IN 	LECTURERSSN	VARCHAR(9))
BEGIN
	SELECT C.NAME, C.BEGINTIME, C.ENDTIME
    FROM CLASS AS C
    WHERE C.LECTURERSSN = LECTURERSSN;
END //
DELIMITER;

# XEM SỐ LƯỢNG SINH VIÊN CỦA LỚP HỌC
DELIMITER //
CREATE PROCEDURE VIEW_NUMSTUDENTS_OF_CLASS(IN 	CLASSNUM 	INT)
BEGIN
	SELECT NAME, NUM_OF_STUDENTS(NUM)
    FROM CLASS AS C
    WHERE C.NUM = CLASSNUM;
END //
DELIMITER;

# CHỨC NĂNG CỦA QUẢN TRỊ VIÊN
DELIMITER //
CREATE PROCEDURE INSERT_FACULTY(IN 	ID				INT,
									NAME			VARCHAR(30),
									DESCRIPTION		VARCHAR(30))
BEGIN
	INSERT INTO FACULTY VALUES (ID, NAME, DESCRIPTION);
END //

CREATE PROCEDURE INSERT_VID_COURSE(IN COURSEID 		INT,
									LECTURERSSN		VARCHAR(9),
									FACID	    	INT,
									NAME	    	VARCHAR(30),
									DESCRIPTION 	VARCHAR(99),
									PRICE			INT, 
                                    COURSEDURATION	INT)
BEGIN
	INSERT INTO COURSE VALUES (COURSEID, LECTURERSSN, FACID, NAME, DESCRIPTION, PRICE);
    INSERT INTO VIDEOCOURSE VALUES (COURSEID, COURSEDURATION);
END //

CREATE PROCEDURE INSERT_ONL_COURSE(IN COURSEID 		INT,
									LECTURERSSN		VARCHAR(9),
									FACID	    	INT,
									NAME	    	VARCHAR(30),
									DESCRIPTION 	VARCHAR(99),
									PRICE			INT)
BEGIN
	INSERT INTO COURSE VALUES (COURSEID, LECTURERSSN, FACID, NAME, DESCRIPTION, PRICE);
    INSERT INTO ONLINECOURSE VALUES (COURSEID);
END //

CREATE PROCEDURE INSERT_CLASS(IN 	CLASSNUM		INT,
									COURSEID		INT,
                                    NAME			VARCHAR(9),
									LECTURERSSN		VARCHAR(9),
									BEGINTIME		DATE,
									ENDTIME			DATE)
BEGIN
	INSERT INTO CLASS VALUES (CLASSNUM, COURSEID, LECTURERSSN, BEGINTIME, ENDTIME, NAME);
END //
DELIMITER ;

# Xóa khóa học
DELIMITER //
CREATE PROCEDURE DELETE_COURSE(IN 	ID	INT)
BEGIN
	DELETE FROM COURSE AS C
    WHERE C.ID = ID;
END //
DELIMITER ;

# Xóa lớp học
DELIMITER //
CREATE PROCEDURE DELETE_CLASS(IN 	NUM	INT)
BEGIN
	DELETE FROM CLASS AS C
    WHERE C.NUM = NUM;
END //
DELIMITER ;


# Thay đổi thông tin của khóa học
DELIMITER //
CREATE PROCEDURE UPDATE_VID_COURSE(IN	ID						INT,
									LECTURERSSN             VARCHAR(9),
									FACID	              	INT,
									`NAME`	                VARCHAR(30),
									`DESCRIPTION` 			VARCHAR(99),
									PRICE            		INT,
                                    COURSEDURATION			INT)
BEGIN
	UPDATE COURSE AS C
    SET C.LECTURERSSN = LECTURERSSN,
		C.FACID = FACID,
        C.`NAME` = `NAME`,
        C.`DESCRIPTION` = `DESCRIPTION`,
        C.PRICE = PRICE
	WHERE C.ID = ID;
	UPDATE VIDEOCOURSE AS VC
	SET VC.COURSEDURATION = COURSEDURATION
	WHERE VC.COURSEID = ID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UPDATE_ONL_COURSE(IN	ID						INT,
										LECTURERSSN             VARCHAR(9),
										FACID	              	INT,
										`NAME`	                VARCHAR(30),
										`DESCRIPTION` 			VARCHAR(99),
										PRICE            		INT)
BEGIN
	UPDATE COURSE AS C
    SET C.LECTURERSSN = LECTURERSSN,
		C.FACID = FACID,
        C.`NAME` = `NAME`,
        C.`DESCRIPTION` = `DESCRIPTION`,
        C.PRICE = PRICE
	WHERE C.ID = ID;
END //
DELIMITER ;

#==================================CREATE FUNCTION==================================
DROP FUNCTION IF EXISTS NUM_OF_STUDENTS;
DROP FUNCTION IF EXISTS FULL_NAME;

DELIMITER //
CREATE FUNCTION NUM_OF_STUDENTS(CLASSNUM 	INT)
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE NUM INT;
    SET NUM = (SELECT COUNT(*)
    FROM JOINCLASS AS J
    WHERE J.CLASSNUM = CLASSNUM);
    RETURN NUM;
END //

CREATE FUNCTION FULL_NAME(FNAME VARCHAR(15), LNAME VARCHAR(15))
RETURNS VARCHAR(30) DETERMINISTIC
BEGIN
	DECLARE FULLNAME VARCHAR(30);
    SET FULLNAME = CONCAT(FNAME, ' ', LNAME);
    RETURN FULLNAME;
END //
DELIMITER ;

#==================================SELECT==================================
	# Xem danh sách học viên
SELECT S.SSN, FULL_NAME(FNAME, LNAME), USERNAME, PASS, EMAIL, SEX AS STUDENT
FROM STUDENT AS S, USER AS U
WHERE S.SSN = U.SSN;
	# Xem danh sách giảng viên
SELECT L.SSN, FULL_NAME(FNAME, LNAME), USERNAME, PASS, EMAIL, SEX, QUALIFICATION
FROM LECTURER AS L, USER AS U
WHERE L.SSN = U.SSN;
	# Xem danh sách quản trị viên
SELECT A.SSN, FULL_NAME(FNAME, LNAME), USERNAME, PASS, EMAIL, SEX
FROM ADMINISTRATOR AS A, USER AS U
WHERE A.SSN = U.SSN;
	
#==================================INSERT==================================
-- STUDENT
INSERT INTO USER VALUES ('1912715', 'Binh', 'Cao', 'ctbinh', 'ctbinh123', 'binh@gmail.com', 'Male');
INSERT INTO STUDENT VALUES ('1912715');
INSERT INTO USER VALUES ('1911262', 'Huy', 'Tran', 'tqhuy', 'tqhuy123', 'huy@gmail.com', 'Male');
INSERT INTO STUDENT VALUES ('1911262');
INSERT INTO USER VALUES ('2014127', 'Phong', 'Nguyen', 'nthphong', 'nthphong123', 'phong@gmail.com', 'Male');
INSERT INTO STUDENT VALUES ('2014127');

-- LECTURER
INSERT INTO USER VALUES ('8888888', 'Chau', 'Vo', 'vtnchau', 'vtnchau123', 'vtnchau@gmail.com', 'Female');
INSERT INTO LECTURER VALUES ('8888888', 'TS.');
INSERT INTO USER VALUES ('7777777', 'Hoa', 'Tran', 'hoatran', 'hoa1234', 'hoa@gmail.com', 'Female');
INSERT INTO LECTURER VALUES ('7777777', 'TS.');

-- ADMINISTRATOR
INSERT INTO USER VALUES ('9999999', 'A', 'D', 'admin', 'admin123', 'admin@gmail.com', 'Unknown');
INSERT INTO ADMINISTRATOR VALUES ('9999999');

-- FACULTY
INSERT INTO FACULTY VALUES (1, 'Hóa', 'Môn học thú vị');
INSERT INTO FACULTY VALUES (2, 'Toán', 'Môn học thú vị');
INSERT INTO FACULTY VALUES (3, 'Lý', 'Môn học thú vị');
INSERT INTO FACULTY VALUES (4, 'Văn', 'Môn học thú vị');

-- VIDEO COURSE
INSERT INTO COURSE VALUES (1, '7777777', 1, 'Luyện thi đại học', 'Khóa học mục tiêu 10đ môn hóa', 600000);
INSERT INTO VIDEOCOURSE VALUES (1, 600);
INSERT INTO COURSE VALUES (4, '8888888', 2, 'Toán 12', 'Khóa học hay', 1200000);
INSERT INTO VIDEOCOURSE VALUES (4, 600);

-- ONLINE COURSE
INSERT INTO COURSE VALUES (2, '8888888', 1, 'Hóa 12', 'Khóa học hay', 1000000);
INSERT INTO ONLINECOURSE VALUES (2);
INSERT INTO COURSE VALUES (3, '7777777', 1, 'Hóa 11', 'Khóa học hay', 600000);
INSERT INTO ONLINECOURSE VALUES (3);
INSERT INTO COURSE VALUES (5, '8888888', 2, 'Toán 11', 'Khóa học hay', 2000000);
INSERT INTO ONLINECOURSE VALUES (5);

-- CLASS
INSERT INTO CLASS VALUES (3, 5, '8888888', '2021-12-10', '2022-10-10', 'L03');
INSERT INTO CLASS VALUES (1, 2, '8888888', '2021-12-10', '2022-10-10', 'L01');
INSERT INTO CLASS VALUES (2, 2, '7777777', '2021-11-1', '2022-10-10', 'L02');
INSERT INTO CLASS VALUES (4, 2, '7777777', '2021-11-29', '2022-10-10', 'L04');

-- REGISTER
INSERT INTO REGISTER VALUES ('1912715', 4, '2021-10-31', 'Đang chờ');
INSERT INTO REGISTER VALUES ('1912715', 1, '2021-10-31', 'Đang chờ');
INSERT INTO REGISTER VALUES ('1911262', 2, '2021-10-20', 'Đang chờ');
INSERT INTO REGISTER VALUES ('2014127', 2, '2021-10-10', 'Đang chờ');

-- FEEDBACK
INSERT INTO FEEDBACK VALUES ('1912715', 5, 'Tuyệt vờI', 10);
INSERT INTO FEEDBACK VALUES ('1912715', 1, 'Tuyệt vời', 10);
INSERT INTO FEEDBACK VALUES ('1911262', 2, 'Tuyệt vời', 10);
INSERT INTO FEEDBACK VALUES ('2014127', 2, 'Tuyệt vời', 10);

-- USER PHONE
INSERT INTO USERPHONE VALUES ('1912715', '0377788288');
INSERT INTO USERPHONE VALUES ('1912715', '0123456789');
INSERT INTO USERPHONE VALUES ('1911262', '0987654321');
INSERT INTO USERPHONE VALUES ('2014127', '0999999999');

-- CLASSWEEK
INSERT INTO CLASSWEEK VALUES (3, 5, 34);
INSERT INTO CLASSWEEK VALUES (3, 5, 35);
INSERT INTO CLASSWEEK VALUES (3, 5, 36);

INSERT INTO CLASSWEEK VALUES (4, 2, 34);
INSERT INTO CLASSWEEK VALUES (4, 2, 35);
INSERT INTO CLASSWEEK VALUES (4, 2, 36);

INSERT INTO CLASSWEEK VALUES (1, 2, 34);
INSERT INTO CLASSWEEK VALUES (1, 2, 35);
INSERT INTO CLASSWEEK VALUES (1, 2, 36);
INSERT INTO CLASSWEEK VALUES (2, 2, 34);

-- CLASS LESSON
INSERT INTO CLASSLESSON VALUES (3, 5, 10);
INSERT INTO CLASSLESSON VALUES (3, 5, 11);
INSERT INTO CLASSLESSON VALUES (3, 5, 12);

INSERT INTO CLASSLESSON VALUES (4, 2, 10);
INSERT INTO CLASSLESSON VALUES (4, 2, 11);
INSERT INTO CLASSLESSON VALUES (4, 2, 12);

INSERT INTO CLASSLESSON VALUES (1, 2, 6);
INSERT INTO CLASSLESSON VALUES (1, 2, 7);
INSERT INTO CLASSLESSON VALUES (1, 2, 8);
INSERT INTO CLASSLESSON VALUES (2, 2, 6);
INSERT INTO CLASSLESSON VALUES (2, 2, 7);
INSERT INTO CLASSLESSON VALUES (2, 2, 8);

-- JOIN CLASS
INSERT INTO JOINCLASS VALUES ('1912715', 4, 2);
INSERT INTO JOINCLASS VALUES ('1911262', 1, 2);
INSERT INTO JOINCLASS VALUES ('2014127', 2, 2);
#INSERT INTO JOINCLASS VALUES ('1912715', 3, 5);


#==================================DELETE==================================
#DELETE FROM USER WHERE SSN='7777777';
#==================================UPDATE==================================

#==================================TEST==================================
	# XEM DANH SÁCH KHÓA HỌC
SELECT * FROM COURSE;
	# XEM DANH SÁCH KHÓA HỌC ĐÃ ĐĂNG KÝ
CALL VIEW_REGISTERED_COURSE('1911262');
	# TÌM KIẾM KHÓA HỌC
CALL SEARCH_COURSE('HÓA', 0, 1000000);
	# XEM DANH SÁCH LỚP
CALL VIEW_CLASSES(2);
	# XEM DANH SÁCH HỌC SINH CỦA 1 LỚP
CALL VIEW_STUDENTS_OF_CLASS(1, 1);
	# Số lượng sinh viên của 1 lớp
CALL VIEW_NUMSTUDENTS_OF_CLASS(1);
	# XEM DANH SÁCH HỌC SINH CỦA 1 KHÓA HỌC
CALL VIEW_STUDENTS_OF_COURSE(2, 1);
	# XEM DANH SÁCH LỚP HỌC ĐANG DẠY
CALL VIEW_CLASSES_BEING_TAUGHT('7777777');
	# XEM DANH SÁCH KHÓA HỌC ĐANG PHỤ TRÁCH
CALL VIEW_COURSE_BEING_MANAGE('7777777');
	# Xem phản hồi từ học viên
CALL VIEW_FEEDBACK(1);
	# Xem danh sách lớp học đã tham gia
CALL VIEW_CLASS_JOINED('1912715');


SELECT * FROM JOINCLASS;

CALL UPDATE_VID_COURSE(1, '8888888', 2, 'TEST', 'TEST', 100000, 700);
CALL VIEW_VID_COURSES();
CALL UPDATE_PROFILE('1912715', 'A', 'C', '1212HHHHH', 'ABC', 'MALE');
SELECT * FROM USER;

SELECT * FROM CLASS;